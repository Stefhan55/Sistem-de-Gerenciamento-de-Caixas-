#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <stdbool.h>
#define tamanho 20
#define NUM_CAIXAS 4

typedef struct tsenha {
    int numero;
    char tipo;
    bool atendida;
} tsenha;

struct tfilabanco {
    tsenha dados[tamanho];
    int ini;
    int fim;
};

struct tfilabanco fila;
int proximo;
bool caixa_atendendo[NUM_CAIXAS] = {false};

void fila_entrar();
void fila_sair();
void fila_mostrar();
void menu_mostrar();
void escrever_senhas_atendidas();
void marcar_caixa_atendimento(int caixa);
void desmarcar_caixa_atendimento(int caixa);

int main() {
    setlocale(LC_ALL, "Portuguese");
    proximo = 1;
    fila.ini = 0;
    fila.fim = 0;

    int op = 1;

    while (op != 0) {
        system("cls");
        fila_mostrar();
        menu_mostrar();
        scanf("%d", &op);
        switch (op) {
            case 1:
                fila_entrar();
                break;
            case 2:
                fila_sair();
                break;
        }
    }
    return 0;
}

void fila_entrar() {
    if (fila.fim == tamanho) {
        printf("\n\t A fila está cheia, volte outro dia!\n\t");
        system("pause");
        return;
    }

    char tipo;
    printf("\n\tEscolha o tipo do atendimento:\n\t");
    printf("\n\tC - Comum\n\t");
    printf("\n\tP - Prioridade\n\t");
    printf("\n\tR - Rápido\n\t");
    scanf(" %c", &tipo);
    if (tipo != 'C' && tipo != 'P' && tipo != 'R') {
        printf("\n\t Tipo de atendimento inválido!\n\t");
        return;
    }
    fila.dados[fila.fim].tipo = tipo;
    fila.dados[fila.fim].numero = proximo;
    fila.dados[fila.fim].atendida = false;
    proximo++;
    fila.fim++;
}

void fila_sair() {
    if (fila.ini == fila.fim) {
        printf("\n\t Fila vazia, mas logo aparece alguém!\n\t");
        system("pause");
    } else {
        int caixa;
        printf("\n\t Qual caixa vai atender (1 a 4)?: \n\t");
        scanf("%d", &caixa);
        char tipoatendimento;

        switch (caixa) {
            case 1:
                tipoatendimento = 'P';
                break;
            case 2:
            case 3:
                tipoatendimento = 'C';
                break;
            case 4:
                tipoatendimento = 'R';
                break;
            default:
                printf("\n\tValor inválido!\n\t");
                return;
        }

        int posicao = -1;
        for (int i = 0; i < fila.fim; i++) {
            if (fila.dados[i].tipo == tipoatendimento && !fila.dados[i].atendida) {
                posicao = i;
                break;
            }
        }

        if (posicao == -1) {
            printf("\n\t Nenhuma senha disponível para este tipo de atendimento ou todas já foram atendidas!\n\t");
            return;
        }

        printf("\n\t######### ATENDIMENTO #########\n\t");
        printf("Senha: %c-%d\n", fila.dados[posicao].tipo, fila.dados[posicao].numero);
        printf("Caixa: %d\n", caixa);
        printf("\n\t######### ATENDIMENTO #########\n\t");

        fila.dados[posicao].atendida = true;

        marcar_caixa_atendimento(caixa);

        // Remover elemento atendido da fila
        for (int i = posicao; i < fila.fim - 1; i++) {
            fila.dados[i] = fila.dados[i + 1];
        }
        fila.fim--;
    }
}

void fila_mostrar() {
    printf("\n\tSenhas na fila:\n\t[ ");
    for (int i = 0; i < fila.fim; i++) {
        printf("%c-%d ", fila.dados[i].tipo, fila.dados[i].numero);
    }
    printf("]\n");

    escrever_senhas_atendidas();
}

void menu_mostrar() {
    printf("\n\tEscolha uma opção:\n\t");
    printf("\n\t1 - Nova senha\n\t");
    printf("\n\t2 - Atender\n\t");
    printf("\n\t0 - Sair\n\t");
}

void escrever_senhas_atendidas() {
    printf("\n\tSenhas já atendidas:\n\t[ ");
    bool nenhuma_atendida = true;
    for (int i = 0; i < fila.fim; i++) {
        if (fila.dados[i].atendida) {
            printf("%c-%d ", fila.dados[i].tipo, fila.dados[i].numero);
            nenhuma_atendida = false;
        }
    }
    if (nenhuma_atendida) {
        printf("Nenhuma");
    }
    printf(" ]\n");

    // Mostrar estado dos caixas
    printf("\n\tEstado dos caixas:\n");
    for (int i = 0; i < NUM_CAIXAS; i++) {
        if (caixa_atendendo[i]) {
            printf("\tCaixa %d: Atendendo\n", i + 1);
        } else {
            printf("\tCaixa %d: Livre\n", i + 1);
        }
    }
}

void marcar_caixa_atendimento(int caixa) {
    caixa_atendendo[caixa - 1] = true;
}

void desmarcar_caixa_atendimento(int caixa) {
    caixa_atendendo[caixa - 1] = false;
}
